.include "m328pdef.inc"
.org 0x00
    RJMP start
.equ F_CPU = 16000000
.equ baud = 9600
.equ bps = (F_CPU/16/baud)-1

;Defino estados
.equ espera = 0
.equ energizar = 1
.equ posicionar = 2
.equ punzonar = 3
.equ descarga = 4
.equ fin = 5

.org OC1Aaddr   ; vector de interrupción Timer1 Compare A
rjmp TIMER1_COMPA_ISR

start: 
;Inicio stack pointer
    ldi r16, low(ramend)
    out spl, r16
    ldi r16, high(ramend)
    out sph, r16
;Baudrate UART
    ldi r16, low(bps)
    ldi r17, high(bps)
    rcall inicioUART

; Timer1 en CTC, interrupción cada 1 ms (OCR1A = 249 con F_CPU=16MHz y prescaler 64)
    ldi r16, high(249)
    sts OCR1AH, r16
    ldi r16, low(249)
    sts OCR1AL, r16

    ldi r16, (1<<WGM12)         ; modo CTC
    sts TCCR1B, r16
    ldi r16, (1<<CS11)|(1<<CS10) ; prescaler = 64
    sts TCCR1B, r16

    ldi r16, (1<<OCIE1A)        ; habilito interrupción compare A
    sts TIMSK1, r16
    sei                         ; habilito interrupciones globales
;Defino puertos de salida para motores y leds
    ldi r16, 0xFF
    out DDRD, r16; puerto D para M1, M2 y M3
    ldi r16, 0x04
    out DDRB, r16
;Defino puertos de entrada para los sensores y botones
    ldi r16, 0x00 
    out DDRA, r16
;Configuro UART
inicioUART:
    sts UBRR0L, r16
    sts UBRR0H, r17
    ldi r16, (1<<RXEN0)|(1<<TXEN0)
    sts UCSR0B, r16
    ldi r16, (1<<UCSZ01)|(1<<UCSZ00)
    sts UCSR0C, r16
    RJMP main

;Estado de inicio = espera
ldi r16, espera
sts estado, r16

main: 
    rcall datos ;recibe comandos A,1,2,3
    rcall botones ;revisa el boton de inicio

;Lee el estado actual

    lds r16, estado
    cpi r16, espera
    breq esperando
    cpi r16, energizar
    breq alimentacion
    cpi r16, posicionar
    breq posicionado 
    cpi r16, punzonar
    breq punzonada
    cpi r16, descarga
    breq descargado
    cpi r16, fin
    breq finalizado

    rjmp main
    
;Manejo de estados

esperando:
    rcall estadoEspera
    RJMP main

alimentacion:
    rcall estadoEnergizado
    RJMP main

posicionado:
    rcall estadoPosicionamiento
    RJMP main

punzonada:
    rcall estadoPunzonada
    RJMP main

descargado:
    rcall estadoDescarga
    RJMP main

finalizado:
    rcall estadoFin
    RJMP main

;Configuración de subrutinas

datos: 
; Esperar hasta que llegue un dato
    lds r17, UCSR0A
    sbrs r17, RXC0       ; RXC0 = 1 cuando hay dato
    rjmp datos
; Leer el dato recibido y guardar en r16
    lds r16, UDR0
    cpi r16, 'A'
    breq inicio
    cpi r16, '1'
    breq ligero
    cpi r16, '2'
    breq medio
    cpi r16, '3'
    breq pesado
    ret

; Configurar un temporizador (r17:r16 = ms)
timer:
    sts targetL, r16
    sts targetH, r17
    ldi r16, 0
    sts tickL, r16
    sts tickH, r16
    ret
; Verificar si se cumplió el tiempo
; Devuelve en r16: 1=expirado, 0=no
timer_expirado:
    lds r18, tickL
    lds r19, tickH
    lds r20, targetL
    lds r21, targetH
    cp  r18, r20
    cpc r19, r21
    brlo not_yet
    ldi r16, 1
    ret

aunNo:
    ldi r16, 0
    ret

inicio:
    ldi r18, energizar
    sts estado, r18
    ret

ligero:
    ldi r18, 1
    sts carga, r18
    ret

medio:
    ldi r18, 2
    sts carga, r18
    ret

pesado:   
    ldi r18, 3
    sts carga, r18
    ret

botones:

estadoEspera:       

    ret

estadoEnergizado:   
    sbi PORTD,1         ; motor ON
    lds r16, carga
    cpi r16, 1
    breq energ_ligera
    cpi r16, 2
    breq energ_media
    cpi r16, 3
    breq energ_pesada
    rjmp energ_check

energ_ligera:
    ldi r16, low(3000)
    ldi r17, high(3000)
    rcall set_timer
    rjmp energ_check
energ_media:
    ldi r16, low(4000)
    ldi r17, high(4000)
    rcall set_timer
    rjmp energ_check
energ_pesada:
    ldi r16, low(5000)
    ldi r17, high(5000)
    rcall set_timer

energ_check:
    rcall timer_expired
    cpi r16, 1
    brne energ_exit
    cbi PORTD,1
    ldi r16, posicionar
    sts estado, r16
energ_exit:
    ret

estadoPosicionamiento:

    ret

estadoPunzonada:
        
    ret

estadoDescarga:

    ret

estadoFin:
    
    ret

TIMER1_COMPA_ISR:
    push r16
    in   r16, SREG

    lds  r16, tickL
    inc  r16
    sts  tickL, r16
    brne tick_done
    ; si se desborda -> incrementar tickH
    lds  r16, tickH
    inc  r16
    sts  tickH, r16

tick_done:
    out SREG, r16
    pop r16
    reti

.dseg
estado: .byte 1; Guarda el estado actual
carga: .byte 1; tipo de carga (1-3)
tickL: .byte 1; contador de milisegundos (low)
tickH: .byte 1; contador de milisegundos (high)
targetL: .byte 1; tiempo de espera (low)
targetH: .byte 1; tiempo de espera (high)