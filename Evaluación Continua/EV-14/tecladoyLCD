#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <stdint.h>
#define RS PB0
#define EN PB1
#define D4 PB2
#define D5 PB3
#define D6 PB4
#define D7 PB5

#define FIL_MASK  (0xF0)
#define COL_MASK  (0x0F)

static const uint8_t fil_bits[4] = {4, 5, 6, 7};
static const uint8_t col_bits[4] = {0, 1, 2, 3};

static const char tecladomap[4][4] = {
	{'1','2','3','A'},
	{'4','5','6','B'},
	{'7','8','9','C'},
	{'*','0','#','D'}
};

volatile char tecla = '\0';

void lcd_init_pins(void);
void lcd_send_nibble(uint8_t nibble);
void lcd_send_command(uint8_t cmd);
void lcd_send_data(uint8_t data);
void lcd_init(void);
void lcd_write_string(const char *str);
void teclado_init(void);
char esperar_tecla(void);

void lcd_init_pins() {
	DDRB |= (1 << RS) | (1 << EN) | (1 << D4) |
	(1 << D5) | (1 << D6) | (1 << D7);
	PORTB &= ~((1 << RS) | (1 << EN) | (1 << D4) |
	(1 << D5) | (1 << D6) | (1 << D7));
}

void lcd_send_nibble(uint8_t nibble) {
	if (nibble & 0x01) PORTB |= (1 << D4);
	else PORTB &= ~(1 << D4);
	if (nibble & 0x02) PORTB |= (1 << D5);
	else PORTB &= ~(1 << D5);
	if (nibble & 0x04) PORTB |= (1 << D6);
	else PORTB &= ~(1 << D6);
	if (nibble & 0x08) PORTB |= (1 << D7);
	else PORTB &= ~(1 << D7);
	PORTB |= (1 << EN);
	_delay_us(1);
	PORTB &= ~(1 << EN);
	_delay_us(100);
}
void lcd_send_command(uint8_t cmd) {
	PORTB &= ~(1 << RS);
	lcd_send_nibble(cmd >> 4);
	lcd_send_nibble(cmd & 0x0F);
}

void lcd_send_data(uint8_t data) {
	PORTB |= (1 << RS);
	lcd_send_nibble(data >> 4);
	lcd_send_nibble(data & 0x0F);
}

void lcd_write_string(const char *str) {
	while (*str) {
		lcd_send_data((uint8_t)*str++);
	}
}

void lcd_init() {
	_delay_ms(50);
	PORTB &= ~(1 << RS);

	lcd_send_nibble(0x03);
	_delay_ms(5);
	lcd_send_nibble(0x03);
	_delay_us(100);
	lcd_send_nibble(0x03);
	_delay_us(100);
	lcd_send_nibble(0x02);

	lcd_send_command(0x28);
	lcd_send_command(0x0C);
	lcd_send_command(0x06);
	lcd_send_command(0x01);
	_delay_ms(2);
}

void teclado_init(void) {
	DDRD &= ~COL_MASK;
	DDRD |= FIL_MASK;
	PORTD |= COL_MASK;
	PORTD |= FIL_MASK;
}

static inline uint8_t leer_columnas(void) {
	return PIND & COL_MASK;
}

static inline void activar_filas(uint8_t row_index) {
	PORTD |= FIL_MASK;
	PORTD &= ~(1 << fil_bits[row_index]);
}

static inline void desactivar_filas(void) {
	PORTD |= FIL_MASK;
}

char esperar_tecla(void) {
	for (uint8_t r = 0; r < 4; r++) {
		activar_filas(r);
		_delay_us(50);

		uint8_t cols = leer_columnas();
		if ((cols & COL_MASK) != COL_MASK) {
			_delay_ms(20);
			cols = leer_columnas();
			if ((cols & COL_MASK) == COL_MASK) {
				desactivar_filas();
				continue;
			}

			for (uint8_t c = 0; c < 4; c++) {
				if (!(cols & (1 << col_bits[c]))) {
					while (!(PIND & (1 << col_bits[c])));
					desactivar_filas();
					return tecladomap[r][c];
				}
			}
		}
		desactivar_filas();
	}
	return '\0';
}

int main(void) {
	lcd_init_pins();
	lcd_init();
	teclado_init();

	DDRC &= ~(1 << PC0);
	PORTC &= ~(1 << PC0);

	while (1) {
		char k = esperar_tecla();
		if (k != '\0') {
			tecla = k;
			lcd_send_data((uint8_t)k);
		}

		if (tecla != '\0') {
			if (tecla == 'A') {
				DDRC |= (1 << PC0);
				PORTC |= (1 << PC0);
			}
			tecla = '\0';
		}
	}

	return 0;
}
