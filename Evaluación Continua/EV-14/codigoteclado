#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <stdint.h>

#define FIL_MASK  (0xF0)
#define COL_MASK  (0x0F)

static const uint8_t fil_bits[4] = {4, 5, 6, 7};
static const uint8_t col_bits[4] = {0, 1, 2, 3};

static const char tecladomap[4][4] = {
	{'1','2','3','A'},
	{'4','5','6','B'},
	{'7','8','9','C'},
	{'*','0','#','D'}
};

volatile char tecla = '\0';

void teclado_init(void) {
	DDRD &= ~COL_MASK;
	DDRD |= FIL_MASK;
	PORTD |= COL_MASK;
	PORTD |= FIL_MASK;
}

static inline uint8_t leer_columnas(void) {
	return PIND & COL_MASK;
}

static inline void activar_filas(uint8_t row_index) {
	PORTD |= FIL_MASK;
	PORTD &= ~(1 << fil_bits[row_index]);
}

static inline void desactivar_filas(void) {
	PORTD |= FIL_MASK;
}

char esperar_tecla(void) {
	for (uint8_t r = 0; r < 4; r++) {
		activar_filas(r);
		_delay_us(50);
		uint8_t cols = leer_columnas();
		if ((cols & COL_MASK) != COL_MASK) {
			_delay_ms(20);
			cols = leer_columnas();
			if ((cols & COL_MASK) == COL_MASK) {
				desactivar_filas();
				continue;
			}
			for (uint8_t c = 0; c < 4; c++) {
				if (!(cols & (1 << col_bits[c]))) {
					while (!(PIND & (1 << col_bits[c])) == 0) {
						if (PIND & (1 << col_bits[c])) break;
					}
					desactivar_filas();
					return tecladomap[r][c];
				}
			}
		}
		desactivar_filas();
	}
	return '\0';
}

int main(void) {
	teclado_init();
	while (1) {
		char k = esperar_tecla();
		if (k != '\0') {
			tecla = k;
		}
		if (tecla != '\0') {
			if (tecla == 'A') {
				DDRB |= (1 << PB0);
				PORTB |= (1 << PB0);
			}
			tecla = '\0';
		}
	}
}
